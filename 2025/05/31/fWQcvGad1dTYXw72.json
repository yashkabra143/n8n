{"nodes":[{"parameters":{"resource":"message","operation":"addLabels"},"id":"d1ca8c92-7a69-4a4b-92e5-1a43316e6073","name":"Mark as High Priority","type":"n8n-nodes-base.gmail","typeVersion":1,"position":[0,0],"credentials":{"gmailOAuth2":{"id":"XrwBYBoaTlsy2dGw","name":"Gmail account"}}},{"parameters":{"authentication":"webhook","content":"=🚨 **HIGH PRIORITY UPWORK ALERT** 🚨\n\n**📧 Email Details:**\n• **From:** {{ $json.emailMetadata.from || 'Unknown Sender' }}\n• **Subject:** {{ $json.emailMetadata.subject || 'No Subject' }}\n• **Date:** {{ $json.emailMetadata.date || 'Unknown Date' }}\n\n**🏷️ Classification:** {{ $json.classification || 'Unclassified' }}\n**⚡ Priority:** {{ $json.priority || 'Unknown' }}\n**📋 Summary:** {{ $json.summary || 'No summary available' }}\n\n**📄 Message Preview:**\n{{ $json.emailMetadata.bodyPreview || 'No content available' }}\n\n{{ $json.extractedInfo && Object.keys($json.extractedInfo).length > 0 ? '**📊 Extracted Details:**\\n' + Object.entries($json.extractedInfo).map(([key, value]) => `• **${key.charAt(0).toUpperCase() + key.slice(1)}:** ${value}`).join('\\n') + '\\n' : '' }}\n{{ $json.relevantLinks && $json.relevantLinks.length > 0 ? '**🔗 Relevant Links:**\\n' + $json.relevantLinks.slice(0, 3).map(link => `• ${link}`).join('\\n') + '\\n' : '' }}\n\n**⚠️ Action Required:** {{ $json.actionRequired ? 'YES - Please check immediately!' : 'NO' }}\n\n---\n*📅 Processed at: {{ $json.processedAt || 'Unknown time' }}*\n*🤖 Auto-generated by n8n workflow*","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[20,180],"id":"4fbaa095-982d-4241-a53d-2768252f38a2","name":"High Priority Discord Alert","webhookId":"340d8d4b-c147-4e37-8ca8-fb1994e3990c","credentials":{"discordWebhookApi":{"id":"xurjSE5kPTNzxT3j","name":"Discord Webhook account 2"}}},{"parameters":{"authentication":"webhook","content":"=📬 **Upwork Notification**\n\n**Classification:** {{ $json.classification || 'Unclassified' }}\n**Summary:** {{ $json.summary || 'No summary available' }}\n**Subject:** {{ $json.emailMetadata.subject || 'No Subject' }}\n**From:** {{ $json.emailMetadata.from || 'Unknown Sender' }}\n\n*Low priority - no immediate action required*\n\n---\n*Processed: {{ $json.processedAt || 'Unknown time' }}*","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[20,540],"id":"935cac0a-e75b-4b38-810b-3e46b0ce3e70","name":"Low Priority Discord Summary","webhookId":"340d8d4b-c147-4e37-8ca8-fb1994e3990c","credentials":{"discordWebhookApi":{"id":"xurjSE5kPTNzxT3j","name":"Discord Webhook account 2"}}},{"parameters":{"pollTimes":{"item":[{"mode":"everyMinute"}]},"filters":{"labelIds":["Label_2711911149558664797"],"readStatus":"unread"}},"id":"0c830619-3930-43f0-83e3-8ce61939f7e4","name":"Gmail Trigger1","type":"n8n-nodes-base.gmailTrigger","typeVersion":1,"position":[-1560,160],"credentials":{"gmailOAuth2":{"id":"XrwBYBoaTlsy2dGw","name":"Gmail account"}}},{"parameters":{"resource":"message","operation":"get","messageId":"={{$json[\"id\"]}}","additionalFields":{"format":"full"}},"id":"ae8a31ac-8040-417b-b4c7-46733f55281a","name":"Get Email Body1","type":"n8n-nodes-base.gmail","typeVersion":1,"position":[-1360,160],"credentials":{"gmailOAuth2":{"id":"XrwBYBoaTlsy2dGw","name":"Gmail account"}}},{"parameters":{"jsCode":"// Enhanced email parsing with better error handling\nconst item = $json;\n\n// Extract headers safely\nconst headers = item.payload?.headers || [];\nconst getHeader = (name) => headers.find(h => h.name.toLowerCase() === name.toLowerCase())?.value || '';\n\nconst subject = getHeader('subject') || item.subject || 'No Subject';\nconst fromEmail = getHeader('from') || 'Unknown sender';\nconst toEmail = getHeader('to') || 'Unknown recipient';\nconst date = getHeader('date') || new Date().toISOString();\n\n// Extract body content with better handling\nlet body = '';\nlet htmlBody = '';\n\nfunction extractBodyFromPayload(payload) {\n  if (payload.body?.data) {\n    const decoded = Buffer.from(payload.body.data, 'base64').toString('utf-8');\n    if (payload.mimeType === 'text/plain') {\n      return { text: decoded, html: '' };\n    } else if (payload.mimeType === 'text/html') {\n      return { text: '', html: decoded };\n    }\n  }\n  \n  if (payload.parts) {\n    let textContent = '';\n    let htmlContent = '';\n    \n    for (const part of payload.parts) {\n      if (part.mimeType === 'text/plain' && part.body?.data) {\n        textContent += Buffer.from(part.body.data, 'base64').toString('utf-8');\n      } else if (part.mimeType === 'text/html' && part.body?.data) {\n        htmlContent += Buffer.from(part.body.data, 'base64').toString('utf-8');\n      } else if (part.parts) {\n        // Recursive for nested parts\n        const nested = extractBodyFromPayload(part);\n        textContent += nested.text;\n        htmlContent += nested.html;\n      }\n    }\n    \n    return { text: textContent, html: htmlContent };\n  }\n  \n  return { text: '', html: '' };\n}\n\nconst bodyContent = extractBodyFromPayload(item.payload);\nbody = bodyContent.text || bodyContent.html;\nhtmlBody = bodyContent.html;\n\n// Convert HTML to plain text if needed\nif (!bodyContent.text && bodyContent.html) {\n  body = bodyContent.html\n    .replace(/<br\\s*\\/?>/gi, '\\n')\n    .replace(/<\\/p>/gi, '\\n\\n')\n    .replace(/<[^>]+>/g, '')\n    .replace(/&nbsp;/g, ' ')\n    .replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&quot;/g, '\"')\n    .replace(/&#39;/g, \"'\")\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n// Extract Upwork-specific links\nconst upworkLinks = {\n  proposal: body.match(/https:\\/\\/www\\.upwork\\.com\\/ab\\/proposals[^\\s]+/g) || [],\n  job: body.match(/https:\\/\\/www\\.upwork\\.com\\/jobs[^\\s]+/g) || [],\n  contract: body.match(/https:\\/\\/www\\.upwork\\.com\\/ab\\/contracts[^\\s]+/g) || [],\n  freelancer: body.match(/https:\\/\\/www\\.upwork\\.com\\/freelancers[^\\s]+/g) || []\n};\n\nreturn [{\n  messageId: item.id,\n  threadId: item.threadId,\n  from: fromEmail,\n  to: toEmail,\n  subject: subject,\n  body: body,\n  htmlBody: htmlBody,\n  date: date,\n  upworkLinks: upworkLinks,\n  rawPayload: item.payload // Keep for debugging\n}];"},"id":"36880406-193a-4fa0-93de-8c9f3bdc6b80","name":"Parse Email Content1","type":"n8n-nodes-base.code","typeVersion":2,"position":[-1140,160]},{"parameters":{"modelId":{"__rl":true,"value":"gpt-3.5-turbo","mode":"list","cachedResultName":"GPT-3.5-TURBO"},"messages":{"values":[{"content":"=Analyze this Upwork email and classify it into ONE of these categories:\n\n1. **Job Invitation** - Client invited you to submit a proposal (keywords: \"invited you\", \"submit a proposal\", \"job posting\")\n2. **Interview Request** - Client wants to interview you (keywords: \"interview\", \"would like to chat\", \"schedule a call\")\n3. **Contract Started** - A new contract has begun (keywords: \"contract has started\", \"work has begun\", \"contract is active\")\n4. **Contract Ended** - A contract has been completed/terminated/paused (keywords: \"contract ended\", \"work completed\", \"contract paused\", \"contract terminated\")\n5. **Payment Notification** - Payment received or earnings update (keywords: \"payment\", \"earnings\", \"funds available\", \"deposited\", \"milestone payment\", \"$\" followed by numbers)\n6. **Client Message** - Direct message from a client (keywords: \"sent you a message\", \"new message from\", \"client wrote\")\n7. **Proposal Submitted** - Confirmation of proposal submission (keywords: \"proposal submitted\", \"application sent\")\n8. **Profile View** - Someone viewed your profile (keywords: \"viewed your profile\", \"checked out your profile\")\n9. **Promotional** - Marketing content from Upwork (keywords: \"tips\", \"newsletter\", \"announcement\", \"feature update\")\n10. **Other** - Anything else that doesn't fit above categories\n\nEmail Subject: {{$json[\"subject\"]}}\nEmail Body Preview: {{$json[\"body\"].substring(0, 500)}}...\n\nLook for specific keywords and context clues. For payment emails, look for dollar amounts and words like \"available\", \"deposited\", \"earnings\". For contracts, look for status words like \"started\", \"ended\", \"paused\".\n\nRespond with ONLY the category name (e.g., \"Payment Notification\")."}]},"options":{"temperature":0.1}},"id":"3931f47c-901a-4f91-b3ae-7836b4ea489c","name":"Classify Email1","type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1,"position":[-960,160],"credentials":{"openAiApi":{"id":"Dqcfush3u5R5rndN","name":"OpenAi account"}}},{"parameters":{"jsCode":"// Enhanced data extraction based on email classification\nconst emailData = $items(\"Parse Email Content1\")[0].json;\nconst category = $items(\"Classify Email1\")[0].json.message.content.trim();\nconst body = emailData.body;\nconst subject = emailData.subject;\nconst upworkLinks = emailData.upworkLinks;\n\nlet extractedData = {\n  classification: category,\n  priority: 'Medium',\n  actionRequired: false,\n  extractedInfo: {},\n  relevantLinks: [],\n  summary: ''\n};\n\n// Category-specific data extraction\nswitch (category) {\n  case \"Job Invitation\":\n    extractedData.priority = 'High';\n    extractedData.actionRequired = true;\n    extractedData.relevantLinks = upworkLinks.proposal.concat(upworkLinks.job);\n    \n    // Extract job details\n    const budgetMatch = body.match(/\\$([,\\d]+(?:\\.\\d{2})?)/g);\n    const skillsMatch = body.match(/Skills?:\\s*([^\\n\\r]+)/i);\n    const timelineMatch = body.match(/(\\d+)\\s*(day|week|month)s?/i);\n    \n    extractedData.extractedInfo = {\n      budget: budgetMatch ? budgetMatch[0] : 'Not specified',\n      skills: skillsMatch ? skillsMatch[1].trim() : 'Not specified',\n      timeline: timelineMatch ? timelineMatch[0] : 'Not specified'\n    };\n    extractedData.summary = `New job invitation - Budget: ${extractedData.extractedInfo.budget}`;\n    break;\n    \n  case \"Interview Request\":\n    extractedData.priority = 'High';\n    extractedData.actionRequired = true;\n    extractedData.relevantLinks = upworkLinks.proposal;\n    \n    const clientMatch = body.match(/([A-Z][a-z]+\\s+[A-Z][a-z]+)\\s+would like to interview you/i);\n    extractedData.extractedInfo = {\n      clientName: clientMatch ? clientMatch[1] : 'Not specified'\n    };\n    extractedData.summary = `Interview request from ${extractedData.extractedInfo.clientName}`;\n    break;\n    \n  case \"Payment Notification\":\n    extractedData.priority = 'Medium';\n    extractedData.actionRequired = false;\n    \n    // Better payment detection patterns\n    const earningsMatch = body.match(/\\$([,\\d]+(?:\\.\\d{2})?)/g);\n    const paymentTypeMatch = body.match(/(bonus|milestone|hourly|fixed|payment|earnings|funds)/i);\n    const availableMatch = body.match(/available|deposited|transferred|received/i);\n    \n    extractedData.extractedInfo = {\n      amount: earningsMatch ? earningsMatch[0] : 'Amount not found',\n      type: paymentTypeMatch ? paymentTypeMatch[1] : 'Payment',\n      status: availableMatch ? 'Available' : 'Processed'\n    };\n    extractedData.summary = `Payment notification: ${extractedData.extractedInfo.amount} ${extractedData.extractedInfo.type}`;\n    break;\n    \n  case \"Contract Started\":\n    extractedData.priority = 'High';\n    extractedData.actionRequired = true;\n    extractedData.relevantLinks = upworkLinks.contract;\n    \n    // Better contract title extraction\n    const contractTitleMatch = subject.match(/\"([^\"]+)\"/) || body.match(/contract[:\\s]+([^\\n\\r\\.]+)/i);\n    extractedData.extractedInfo = {\n      contractTitle: contractTitleMatch ? contractTitleMatch[1].trim() : 'Contract title not found'\n    };\n    extractedData.summary = `New contract started: ${extractedData.extractedInfo.contractTitle}`;\n    break;\n    \n  case \"Contract Ended\":\n    extractedData.priority = 'Medium';\n    extractedData.actionRequired = false;\n    extractedData.relevantLinks = upworkLinks.contract;\n    \n    const endedTitleMatch = subject.match(/\"([^\"]+)\"/) || body.match(/contract[:\\s]+([^\\n\\r\\.]+)/i);\n    const endReasonMatch = body.match(/(completed|terminated|paused|cancelled|ended)/i);\n    \n    extractedData.extractedInfo = {\n      contractTitle: endedTitleMatch ? endedTitleMatch[1].trim() : 'Contract title not found',\n      reason: endReasonMatch ? endReasonMatch[1] : 'Not specified'\n    };\n    extractedData.summary = `Contract ${extractedData.extractedInfo.reason}: ${extractedData.extractedInfo.contractTitle}`;\n    break;\n    \n  case \"Client Message\":\n    extractedData.priority = 'High';\n    extractedData.actionRequired = true;\n    \n    const messagePreview = body.substring(0, 100).trim();\n    extractedData.extractedInfo = {\n      preview: messagePreview + (body.length > 100 ? '...' : '')\n    };\n    extractedData.summary = `New client message: ${extractedData.extractedInfo.preview}`;\n    break;\n    \n  case \"Proposal Submitted\":\n    extractedData.priority = 'Low';\n    extractedData.actionRequired = false;\n    extractedData.summary = 'Proposal submission confirmed';\n    break;\n    \n  case \"Profile View\":\n    extractedData.priority = 'Low';\n    extractedData.actionRequired = false;\n    extractedData.summary = 'Someone viewed your profile';\n    break;\n    \n  case \"Promotional\":\n    extractedData.priority = 'Low';\n    extractedData.actionRequired = false;\n    extractedData.summary = 'Promotional content from Upwork';\n    break;\n    \n  default:\n    extractedData.priority = 'Low';\n    extractedData.summary = `Upwork notification: ${category || 'Unclassified'}`;\n}\n\n// Add metadata with corrected structure\nextractedData.processedAt = new Date().toISOString();\nextractedData.emailMetadata = {\n  messageId: emailData.messageId,\n  threadId: emailData.threadId,\n  from: emailData.from,\n  subject: emailData.subject,\n  date: emailData.date,\n  body: emailData.body,\n  bodyPreview: emailData.body ? emailData.body.substring(0, 300) : 'No content available'\n};\n\nreturn [extractedData];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-580,160],"id":"0611c99b-be0a-491d-8eec-4287fd54709e","name":"Extract Details1"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.priority }}","rightValue":"High","operator":{"type":"string","operation":"equals"},"id":"priority-high"},{"leftValue":"={{ $json.classification }}","rightValue":"Job Invitation","operator":{"type":"string","operation":"equals"},"id":"job-invitation"},{"leftValue":"={{ $json.classification }}","rightValue":"Interview Request","operator":{"type":"string","operation":"equals"},"id":"interview-request"},{"leftValue":"={{ $json.classification }}","rightValue":"Contract Started","operator":{"type":"string","operation":"equals"},"id":"contract-started"},{"leftValue":"={{ $json.classification }}","rightValue":"Client Message","operator":{"type":"string","operation":"equals"},"id":"client-message"}],"combinator":"or"}}]},"options":{}},"id":"4ff3ea40-ae29-4c0f-8736-e1cad36c3bfe","name":"Priority Check2","type":"n8n-nodes-base.switch","typeVersion":3,"position":[-340,160],"alwaysOutputData":true},{"parameters":{"resource":"message","operation":"addLabels"},"id":"933f439b-df49-41c9-a862-e6f7c79a6954","name":"Mark as Low Priority1","type":"n8n-nodes-base.gmail","typeVersion":1,"position":[20,360],"credentials":{"gmailOAuth2":{"id":"XrwBYBoaTlsy2dGw","name":"Gmail account"}}}],"connections":{"Gmail Trigger1":{"main":[[{"node":"Get Email Body1","type":"main","index":0}]]},"Get Email Body1":{"main":[[{"node":"Parse Email Content1","type":"main","index":0}]]},"Parse Email Content1":{"main":[[{"node":"Classify Email1","type":"main","index":0}]]},"Classify Email1":{"main":[[{"node":"Extract Details1","type":"main","index":0}]]},"Extract Details1":{"main":[[{"node":"Priority Check2","type":"main","index":0}]]},"Priority Check2":{"main":[[{"node":"Mark as High Priority","type":"main","index":0},{"node":"High Priority Discord Alert","type":"main","index":0},{"node":"Mark as Low Priority1","type":"main","index":0},{"node":"Low Priority Discord Summary","type":"main","index":0}]]}},"pinData":{},"meta":null}